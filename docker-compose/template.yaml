# To start a docker-compose file 
#    docker-compose -f filename.yaml <up|down> [-d]

# To replace place-holders in file 
#    sed -i 's/oldtext/newname/g'

# Set environment variables
#
#    DOCKER_SERVICE_NAME=
#    DOCKER_IMAGE_NAME=
#    TRAEFIK_DOMAIN=
#
# https://docs.docker.com/compose/environment-variables
# https://wiki.debian.org/EnvironmentVariables

version: "3.5"

services:

  ${DOCKER_SERVICE_NAME}:
    image: "${DOCKER_IMAGE_NAME}"
    container_name: "${DOCKER_SERVICE_NAME}"
    restart: unless-stopped
    labels:
      - "traefik.enable=true"  # overrides exposedByDefault setting
      - "traefik.http.routers.${DOCKER_SERVICE_NAME}.rule=Host(`${DOCKER_SERVICE_NAME}.${TRAEFIK_DOMAIN}`)"  # match domain
      - "traefik.http.routers.${DOCKER_SERVICE_NAME}.entrypoints=websecure"  # used http entry point(s)
      - "traefik.http.routers.${DOCKER_SERVICE_NAME}.tls.certresolver=letsencrypt"
#      - "traefik.http.routers.${DOCKER_SERVICE_NAME}.rule=PathPrefix(`/${DOCKER_SERVICE_NAME}`)" # match paths starting with
#      - "traefik.http.routers.${DOCKER_SERVICE_NAME}.rule=Path(`/${DOCKER_SERVICE_NAME}`)" # match exact paths
#    volumes:  # volume and file binds
#      - "${DOCKER_SERVICE_NAME}:/data" # bind folder to volume example
#      - "/var/run/docker.sock:/var/run/docker.sock:ro" # bind the docker API socket
#      - "/etc/localtime:/etc/localtime:ro" # the host timezone
#    devices:  # hardware binds
#      - "/dev/ttyUSB0:/dev/ttyUSB0"
#    ports:  # to expose ports to host network
#      - "80:80/tcp"  # required http
#      - "443:443/tcp"  # optional https
#    networks:  # connected networks
#      - "frontend"
#      - "backend"
#    environment:
#      - "TZ=<timezone>" # if else then UTC
#      - "PUID=<puid>" # runtime user ID
#      - "PGID=<pgid>" # runtime group ID
#    depends_on:  # will only start if services below are running
#      - "service"


# volumes:  # create data volume(s)
#
#   ${DOCKER_SERVICE_NAME}:
#     name: "${DOCKER_SERVICE_NAME}"

# networks:  # create or declare network(s)
#
#   ${DOCKER_SERVICE_NAME}:
#     external: false  # is the network defined outside this docker-compose?
#   frontend:
#     external: true  
#   backend:
#     external: true 
